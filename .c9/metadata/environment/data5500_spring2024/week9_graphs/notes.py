{"filter":false,"title":"notes.py","tooltip":"/data5500_spring2024/week9_graphs/notes.py","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":21,"column":45},"action":"insert","lines":["import networkx as nx","import random","","# Create an empty graph","G = nx.Graph()","","# Add nodes with degrees below and above 5","for i in range(1, 11):","    if i % 2 == 0:","        G.add_node(i, degree=random.randint(1, 4))  # Nodes with degrees below 5","    else:","        G.add_node(i, degree=random.randint(6, 10))  # Nodes with degrees above 5","","# Add random edges to the graph","for node1 in G.nodes():","    for node2 in G.nodes():","        if node1 != node2 and not G.has_edge(node1, node2):","            G.add_edge(node1, node2)","","# Print the degrees of nodes in the graph","for node, degree in dict(G.degree()).items():","    print(f\"Node {node} has degree {degree}\")"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":21,"column":45},"action":"remove","lines":["import networkx as nx","import random","","# Create an empty graph","G = nx.Graph()","","# Add nodes with degrees below and above 5","for i in range(1, 11):","    if i % 2 == 0:","        G.add_node(i, degree=random.randint(1, 4))  # Nodes with degrees below 5","    else:","        G.add_node(i, degree=random.randint(6, 10))  # Nodes with degrees above 5","","# Add random edges to the graph","for node1 in G.nodes():","    for node2 in G.nodes():","        if node1 != node2 and not G.has_edge(node1, node2):","            G.add_edge(node1, node2)","","# Print the degrees of nodes in the graph","for node, degree in dict(G.degree()).items():","    print(f\"Node {node} has degree {degree}\")"],"id":2},{"start":{"row":0,"column":0},"end":{"row":21,"column":45},"action":"insert","lines":["import networkx as nx","import random","","# Create an empty graph","G = nx.Graph()","","# Add nodes with degrees above and below 9","for i in range(1, 11):","    if i % 2 == 0:","        G.add_node(i, degree=random.randint(1, 8))  # Nodes with degrees below 9","    else:","        G.add_node(i, degree=random.randint(10, 15))  # Nodes with degrees above 9","","# Add random edges to the graph","for node1 in G.nodes():","    for node2 in G.nodes():","        if node1 != node2 and not G.has_edge(node1, node2):","            G.add_edge(node1, node2)","","# Print the degrees of nodes in the graph","for node, degree in dict(G.degree()).items():","    print(f\"Node {node} has degree {degree}\")"]}],[{"start":{"row":0,"column":0},"end":{"row":21,"column":45},"action":"remove","lines":["import networkx as nx","import random","","# Create an empty graph","G = nx.Graph()","","# Add nodes with degrees above and below 9","for i in range(1, 11):","    if i % 2 == 0:","        G.add_node(i, degree=random.randint(1, 8))  # Nodes with degrees below 9","    else:","        G.add_node(i, degree=random.randint(10, 15))  # Nodes with degrees above 9","","# Add random edges to the graph","for node1 in G.nodes():","    for node2 in G.nodes():","        if node1 != node2 and not G.has_edge(node1, node2):","            G.add_edge(node1, node2)","","# Print the degrees of nodes in the graph","for node, degree in dict(G.degree()).items():","    print(f\"Node {node} has degree {degree}\")"],"id":3},{"start":{"row":0,"column":0},"end":{"row":21,"column":45},"action":"insert","lines":["import networkx as nx","import random","","# Create an empty graph","G = nx.Graph()","","# Add nodes with degrees above and below 5","for i in range(1, 11):","    if i % 2 == 0:","        G.add_node(i, degree=random.randint(1, 4))  # Nodes with degrees below 5","    else:","        G.add_node(i, degree=random.randint(6, 9))  # Nodes with degrees above 5","","# Add random edges to the graph","for node1 in G.nodes():","    for node2 in G.nodes():","        if node1 != node2 and not G.has_edge(node1, node2):","            G.add_edge(node1, node2)","","# Print the degrees of nodes in the graph","for node, degree in dict(G.degree()).items():","    print(f\"Node {node} has degree {degree}\")"]}],[{"start":{"row":0,"column":0},"end":{"row":21,"column":45},"action":"remove","lines":["import networkx as nx","import random","","# Create an empty graph","G = nx.Graph()","","# Add nodes with degrees above and below 5","for i in range(1, 11):","    if i % 2 == 0:","        G.add_node(i, degree=random.randint(1, 4))  # Nodes with degrees below 5","    else:","        G.add_node(i, degree=random.randint(6, 9))  # Nodes with degrees above 5","","# Add random edges to the graph","for node1 in G.nodes():","    for node2 in G.nodes():","        if node1 != node2 and not G.has_edge(node1, node2):","            G.add_edge(node1, node2)","","# Print the degrees of nodes in the graph","for node, degree in dict(G.degree()).items():","    print(f\"Node {node} has degree {degree}\")"],"id":4},{"start":{"row":0,"column":0},"end":{"row":23,"column":45},"action":"insert","lines":["import networkx as nx","import random","","# Create an empty graph","G = nx.Graph()","","# Add nodes with degrees both above and below 5","for i in range(1, 11):","    if i % 2 == 0:","        degree = random.randint(1, 4)  # Nodes with degrees below 5","    else:","        degree = random.randint(6, 9)  # Nodes with degrees above 5","    G.add_node(i, degree=degree)","","# Add random edges to the graph","for node1 in G.nodes():","    for node2 in G.nodes():","        if node1 != node2 and not G.has_edge(node1, node2):","            G.add_edge(node1, node2)","","# Print the degrees of nodes in the graph","for node, data in G.nodes(data=True):","    degree = data['degree']","    print(f\"Node {node} has degree {degree}\")"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":15,"column":23},"end":{"row":15,"column":23},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1711067912205,"hash":"510af932f16406c40e7c3d1ab226bb8f820b9ae1"}