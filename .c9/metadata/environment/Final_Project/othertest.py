{"filter":false,"title":"othertest.py","tooltip":"/Final_Project/othertest.py","undoManager":{"mark":2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":198,"column":16},"action":"insert","lines":["import json","import requests","def MeanReversion(stock):","    i = 0","    buy = 0","    total_profit = 0","    iterations = 0","    first_buy = 0","    bought_list = 0","    short_sell = 0","    short_sell_buy = 0","    short_sell_sale = 0","    first_short_sell_buy = 0","    for price in prices:","        if i >= 5:","            current_price = price #the next price in the list","            average = (prices[i-1]+prices[i-2]+prices[i-3]+prices[i-4]+prices[i-5])/5#average price for the 5 previous days","            if current_price < average * 1.04 and buy == 0:","        #buy","                while first_buy == 0:","                    first_buy = current_price","                    if current_price == prices[-1] and current_price < average * 1.04 and buy == 0:","                        print(\"You should buy\", ticker, \"today\")","                buy = current_price","        #update buy variable","                print(\"buy at:\", buy)","                #short sell sale","            elif current_price < average * 1.04 and short_sell_buy != 0:","                short_sell_sale = current_price","                profit = (short_sell_sale - short_sell_buy)","                total_profit += profit","                print(\"short sell at: \", short_sell_sale)","                print(\"trade profit\", round(profit,2))","                if current_price == prices[-1] and current_price < average * 1.04 and short_sell_buy != 0:","                    print(\"You should short sell\", ticker, \"today\")","                short_sell_buy = 0","        #update first_buy variable if this is the first time you buy","            elif current_price > average * 1.04 and short_sell_buy == 0:","        #short sell buy","                while first_short_sell_buy == 0:","                    first_short_sell_buy = current_price","                    if current_price == prices[-1] and current_price > average * 1.04 and short_sell_buy == 0:","                        print(\"You should buy short;\", ticker, \"today\")","                short_sell_buy = current_price","                #long sell","            elif current_price > average * 1.04 and buy != 0:","                sell = current_price","                profit = (sell - buy)","                total_profit += profit","                print(\"sell at: \", sell)","                print(\"trade profit\", round(profit,2))","                if current_price == prices[-1] and current_price > average * 1.04 and buy != 0:","                    print(\"You should sell\", ticker, \"today\")","                buy = 0","            else:","                pass","        # do nothing this iteration","        i +=1","    # print output","    print(\"-----------------------------------\")","    print(\"Mean Reversion Results\")","    print(\"Total Profit is: \", round(total_profit, 2))","    results[ticker + \" MR_profit\"] = round(total_profit, 2)","def MovingAverageStrategy(stock):","    i = 0","    buy = 0","    total_profit = 0","    first_buy = 0","    short_sell = 0","    short_sell_buy = 0","    short_sell_sale = 0","    first_short_sell_buy = 0","    for price in prices:","        if i >= 5:","            current_price = price #the next price in the list","            average = (prices[i-1]+prices[i-2]+prices[i-3]+prices[i-4]+prices[i-5])/5#average price for the 5 previous days","            if current_price > average and buy == 0:","        #buy","                while first_buy == 0:","                    first_buy = current_price","                    if current_price == prices[-1] and current_price > average and buy == 0:","                        print(\"You should buy\", ticker, \"today\")","                buy = current_price","        #update buy variable","                print(\"buy at:\", buy)","            elif current_price > average and short_sell_buy != 0:","                short_sell_sale = current_price","                profit = (short_sell_sale - short_sell_buy)","                total_profit += profit","                print(\"short sell at: \", short_sell_sale)","                print(\"trade profit\", round(profit,2))","                if current_price == prices[-1] and current_price < average and short_sell_buy != 0:","                        print(\"You should short sell\", ticker, \"today\")","                short_sell_buy = 0","        #update first_buy variable if this is the first time you buy","            elif current_price < average and short_sell_buy == 0:","                    #buy short","                while first_short_sell_buy == 0:","                    first_short_sell_buy = current_price","                    if current_price == prices[-1] and current_price > average and short_sell_buy == 0:","                        print(\"You should buy short\", ticker, \"today\")","                short_sell_buy = current_price","        #update buy variable","                print(\"buy short at:\", short_sell_buy)","            elif current_price < average and buy != 0:","        #sell","                sell = current_price","                profit = (sell - buy)","                total_profit += profit","                print(\"sell at: \", sell)","                print(\"trade profit\", round(profit,2))","                if current_price == prices[-1] and current_price < average and buy != 0:","                        print(\"You should sell\", ticker, \"today\")","                buy = 0","            else:","                pass","        i+=1","    #print output","    print(\"-----------------\")","    print(\"Simple Average Results\")","    print(\"Total Profit is: \", round(total_profit, 2))","    results[ticker + \" SMA_profit\"] = round(total_profit, 2)","def Simple_Avg_Reverse(stock):","    i = 0","    buy = 0","    total_profit = 0","    first_buy = 0","    short_sell = 0","    short_sell_buy = 0","    short_sell_sale = 0","    first_short_sell_buy = 0","    for price in prices:","        if i >= 5:","            current_price = price #the next price in the list","            average = (prices[i-1]+prices[i-2]+prices[i-3]+prices[i-4]+prices[i-5])/5#average price for the 5 previous days","            if current_price < average and buy == 0:","        #buy","                while first_buy == 0:","                    first_buy = current_price","                    if current_price == prices[-1] and current_price < average and buy == 0:","                        print(\"You should buy\", ticker, \"today\")","                buy = current_price","        #update buy variable","                print(\"buy at:\", buy)","            elif current_price < average and short_sell_buy != 0:","                short_sell_sale = current_price","                profit = (short_sell_sale - short_sell_buy)","                total_profit += profit","                print(\"sell at: \", short_sell_sale)","                print(\"trade profit\", round(profit,2))","                if current_price == prices[-1] and current_price > average and short_sell_buy == 0:","                        print(\"You should short sell\", ticker, \"today\")","                short_sell_buy = 0","            elif current_price > average and buy != 0:","        #sell","                sell = current_price","                profit = (sell - buy)","                total_profit += profit","                print(\"sell at: \", sell)","                print(\"trade profit\", round(profit,2))","                if current_price == prices[-1] and current_price > average and buy != 0:","                        print(\"You should sell\", ticker, \"today\")","                buy = 0","            elif current_price > average and short_sell_buy == 0:","                while first_short_sell_buy == 0:","                    first_short_sell_buy = current_price","                    if current_price == prices[-1] and current_price < average and short_sell_buy == 0:","                        print(\"You should short buy\", ticker, \"today\")","                short_sell_buy = current_price","        #update buy variable","                print(\"short buy at:\", short_sell_buy)","            else:","                pass","        i += 1","    #print output","    print(\"-----------------\")","    print(\"Simple Average Reverse Results\")","    print(\"Total Profit is: \", round(total_profit, 2))","    results[ticker + \" SAR_profit\"] = round(total_profit, 2)","#Save my results as a json","def SaveResults(results):","    json.dump(results, open(\"/home/ubuntu/environment/final_proj/results.json\", \"w\"), indent = 4)","    file.close()","    return","def initial_data_pull(tickers):","    #get my data on the website and make it useable.","    url = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\"+ticker+\"&outputsize=full&apikey=6K822N6TX3TU6KBP\"","    request = requests.get(url)","    rqst_dictionary = json.loads(request.text)","    key1 = \"Time Series (Daily)\"","    key2 = \"4. close\"","    file = open(\"/home/ubuntu/environment/final_proj/\" + ticker + \".csv\", \"w\")","    lines = []","    #find the specific data we want","    for date in rqst_dictionary[key1].keys():","        lines.append(date + \", \" + rqst_dictionary[key1][date][key2] + \"\\n\")","    lines = lines[::-1]","    file.writelines(lines)","    file.close()"],"id":1}],[{"start":{"row":198,"column":16},"end":{"row":199,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":199,"column":0},"end":{"row":199,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":199,"column":0},"end":{"row":292,"column":12},"action":"insert","lines":["def append_data(tickers):","    url = \"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\"+ticker+\"&outputsize=full&apikey=6K822N6TX3TU6KBP\"","    #get data","    request = requests.get(url)","    rqst_dictionary = json.loads(request.text)","    key1 = \"Time Series (Daily)\"","    key2 = \"4. close\"","    #open file of each ticker","    csv_file = open(\"/home/ubuntu/environment/final_proj/\" + ticker + \".csv\", \"r\")","    lines = csv_file.readlines()","    latest_date = lines[-1].split(\",\")[0]","    print(\"latest date\", latest_date)","    # I need to fix my file path","    file = open(\"/home/ubuntu/environment/final_proj/\"+ticker+\".csv\",\"r\")","    #find the date and price because thats all I need","    for date in rqst_dictionary[key1].keys():","        lines.append(date + \", \" + rqst_dictionary[key1][date][key2] + \"\\n\")","        lines = lines[::-1]","        file.close","    new_lines = []","    for date in rqst_dictionary[key1].keys():","        if date == latest_date:","            #make it so if it is already up to date stop","            break","    #if not up to date keep updating","        else: new_lines.append(date + \", \" + rqst_dictionary[key1][date][key2] + \"\\n\")","    new_lines = new_lines[::-1]","    file = open(\"/home/ubuntu/environment/final_proj/\"+ticker+\".csv\",\"a\")","    file.writelines(new_lines)","    file.close()","results = {}","tickers = ['AAPL']#, 'GOOG', 'ADBE', 'AMZN', 'COST', 'DIS', 'HD', 'SNOW', 'SPWH', 'WMT']","#loop through all tickers","for ticker in tickers:","# pull data and put it into a csv file","    initial_data_pull(ticker)","# update data","    append_data(ticker)","    file = open('/home/ubuntu/environment/final_proj/%s.csv' % (ticker))","    lines = file.readlines()","    prices = []","#convert data to a more usable format","    for line in lines:","        date, numberStr = line.split(', ')","        price = float(numberStr)","        price = round(price, 2) # to round the price to 2 decimals","        prices.append(price)","        results[ticker+ \" prices\"] = prices","# call all my functions","    print(\"\\nMean Reversion strategy for %s:\\n\"%(ticker))","    MeanReversion(file)","    print(\"\\nMoving Average Strategy for %s:\\n\"%(ticker))","    MovingAverageStrategy(file)","    print(\"\\nSimple Avg Reverse strategy for %s:\\n\"%(ticker))","    Simple_Avg_Reverse(file)"," #save results","SaveResults(results)","tick = ''","tick2 = ''","tick3 = ''","Best = []","Best2 = []","Best3 = []","greatestProfit = 0","greatestProfit2 = 0","greatestProfit3 = 0","#make 3 lists each one associated with a different strategy and then compare the best profits for each list.","for ticker in tickers:","    key=results.get(ticker + ' MR_profit')","    Best.append(key)","    key3 = results.get(ticker + ' SAR_profit')","    Best3.append(key3)","    key2=results.get(ticker + ' SMA_profit')","    Best2.append(key2)","    print(ticker, key, key2, key3)","    if max(Best) > greatestProfit:","        greatestProfit = max(Best)","        tick = ticker","    if max(Best2) > greatestProfit2:","        greatestProfit2 = max(Best2)","        tick2 = ticker","    if max(Best3) > greatestProfit3:","        greatestProfit3 = max(Best3)","        tick3 = ticker","    else:","        pass","if greatestProfit > greatestProfit2 and greatestProfit > greatestProfit3:","    final = ('%s has the greatest profit with a profit of %f using the Mean Reversion Strategy.' %(tick, greatestProfit))","if greatestProfit2 > greatestProfit and greatestProfit2 > greatestProfit3:","    final = ('%s has the greatest profit with a profit of %f using the Simple Moving Average.' %(tick2, greatestProfit2))","if greatestProfit3 > greatestProfit and greatestProfit3 > greatestProfit2:","    final = ('%s has the greatest profit with a profit of %f using the Simple Average Reverse.' %(tick3, greatestProfit3))","json.dump(final, open(\"/home/ubuntu/environment/final_proj/results.json\", \"a\"), indent = 4)","file.close()"],"id":4}]]},"ace":{"folds":[],"scrolltop":2748.7999999999997,"scrollleft":400,"selection":{"start":{"row":186,"column":11},"end":{"row":186,"column":129},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":200,"state":"start","mode":"ace/mode/python"}},"timestamp":1713388744905,"hash":"d7eac8e857118804b694363b1fe85496e4c66ebc"}