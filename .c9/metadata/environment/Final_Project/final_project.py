{"changed":true,"filter":false,"title":"final_project.py","tooltip":"/Final_Project/final_project.py","value":"import json\nimport requests     #imports json and requests functionality\n\n\n\ndef InitialDataPull(tickers):       #brings data in\n    url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=' + ticker + '&outputsize=full&apikey=6K822N6TX3TU6KBP'\n    request = requests.get(url)         #brings data into code and creates a dictionary of it\n    rqstDictionary = json.loads(request.text)\n\n    key1 = \"Time Series (Daily)\"\n    # Need all the dates\n    key2 = \"4. close\"\n    \n    file = open(\"/home/ubuntu/environment/pinal_project/data/\"+ticker+\".csv\", \"w\")\n\n    lines = []\n\n    for date in rqstDictionary[key1].keys():        #adds prices\n        lines.append(date + \", \" + rqstDictionary[key1][date][key2] + \"\\n\")\n\n    lines = lines[::-1]         #flips data\n    file.writelines(lines)      \n    file.close()\n\ndef appendData(tickers):            #adds new data\n    url = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=' + ticker + '&outputsize=full&apikey=6K822N6TX3TU6KBP'\n    request = requests.get(url)\n    rqstDictionary = json.loads(request.text)\n    \n    key1 = \"Time Series (Daily)\"\n    # Need all the dates\n    key2 = \"4. close\"\n    csvFile = open(\"/home/ubuntu/environment/pinal_project/data/\"+ticker+\".csv\", \"r\")\n    lines = csvFile.readlines()\n    csvFile.close()\n    \n    latest_date = lines[-1].split(\", \")[0]\n    \n    newLines = []\n    for date in rqstDictionary[key1].keys():\n        if date == latest_date:\n            break\n        else:\n            newLines.append(date + ', ' + rqstDictionary[key1][date][key2] + \"\\n\")\n            \n    newLines = newLines[::-1]       #flips data\n    \n    file = open(\"/home/ubuntu/environment/pinal_project/data/\"+ticker+\".csv\", \"a\")\n    file.writelines(newLines)\n    file.close()     \n    \ndef meanReversionStrategy(prices):      #defines mean reversion strategy\n    first_buy = 0\n    buy = 0           #initial values\n    sell = 0\n    profit = 0\n    total_profit = 0\n    for i in range(len(prices)):    \n        five_day_avg = round((prices[i-5]+prices[i-4]+prices[i-3]+prices[i-2]+prices[i-1])/5, 2)   \n        if prices[i] < five_day_avg * .98 and buy == 0:    \n            if first_buy == 0:          \n                first_buy = prices[i]\n                buy = prices[i]\n            else:\n                buy = prices[i]\n            # print(\"buying at\", buy) \n        elif prices[i] > five_day_avg * 1.02 and buy != 0:  \n            sell = prices[i]\n            profit = round(sell-buy, 2)\n            total_profit += profit\n            total_profit = round(total_profit, 2)\n            buy = 0               \n            # print(\"selling at\", sell)        \n            # print(\"trade profit:\", profit)\n        else:\n            pass\n        if i == len(prices)-1 and prices[i] < five_day_avg * .98 and buy > 0:\n            print(\"You should buy this stock today!\")\n        elif i == len(prices)-1 and prices[i] > five_day_avg and buy == 0:\n            print(\"You should sell this stock today!\")\n        else:\n            pass\n    \n    \n    returns = str(round((total_profit/first_buy*100), 2))+\"%\"\n    print(\"Total profit:\", total_profit)\n    # print(\"First buy:\", first_buy)\n    print(\"Percent return:\", returns)\n    print(\"---------------\")\n    return total_profit, returns\n\ndef simpleMovingAverageStrategy(prices):    #defines simple moving average strategy\n    first_buy = 0\n    buy = 0           #initial values\n    sell = 0\n    profit = 0\n    total_profit = 0\n    for i in range(len(prices)):   \n        five_day_avg = round((prices[i-5]+prices[i-4]+prices[i-3]+prices[i-2]+prices[i-1])/5, 2)  \n        if prices[i] > five_day_avg and buy == 0:   \n            if first_buy == 0:         \n                first_buy = prices[i]\n                buy = prices[i]\n            else:\n                buy = prices[i]\n            # print(\"buying at\", buy)    \n        elif prices[i] < five_day_avg and buy != 0: \n            sell = prices[i]\n            profit = round(sell-buy, 2)\n            total_profit += profit         \n            total_profit = round(total_profit, 2)\n            buy = 0                    \n            # print(\"selling at\", sell)       \n            # print(\"trade profit:\", profit)\n        else:\n            pass\n        if i == len(prices)-1 and prices[i] > five_day_avg and buy > 0:\n            print(\"You should buy this stock today!\")\n        elif i == len(prices)-1 and prices[i] < five_day_avg and buy == 0:\n            print(\"You should sell this stock today!\")\n        else:\n            pass\n        \n    returns = str(round((total_profit/first_buy*100),2))+\"%\" \n    print(\"Total profit:\", total_profit)\n    # print(\"First buy:\", first_buy)\n    print(\"Percent return:\", returns)\n    print(\"---------------\")\n    return total_profit, returns\n\ndef BollingerBands(prices):\n    first_buy = 0\n    buy = 0           #initial values\n    sell = 0\n    profit = 0\n    total_profit = 0\n    for i in range(len(prices)):   \n        five_day_avg = round((prices[i-5]+prices[i-4]+prices[i-3]+prices[i-2]+prices[i-1])/5, 2)  \n        if prices[i] > five_day_avg * 1.05 and buy == 0:   \n            if first_buy == 0:         \n                first_buy = prices[i]\n                buy = prices[i]\n            else:\n                buy = prices[i]\n            # print(\"buying at\", buy)    \n        elif prices[i] < five_day_avg * 0.95 and buy != 0: \n            sell = prices[i]\n            profit = round(sell-buy, 2)\n            total_profit += profit         \n            total_profit = round(total_profit, 2)\n            buy = 0                    \n            # print(\"selling at\", sell)       \n            # print(\"trade profit:\", profit)\n        else:\n            pass\n        if i == len(prices)-1 and prices[i] > five_day_avg * 1.05 and buy > 0:\n            print(\"You should buy this stock today!\")\n        elif i ==len(prices)-1 and prices[i] < five_day_avg and buy == 0:\n            print(\"You should sell this stock today!\")\n        else:\n            pass\n        \n    returns = str(round((total_profit/first_buy*100),2))+\"%\" \n    print(\"Total profit:\", total_profit)\n    # print(\"First buy:\", first_buy)\n    print(\"Percent return:\", returns)\n    print(\"---------------\")\n    return total_profit, returns\n\ndef SaveResults(results):   #saves results dictionary to a json\n    json.dump(results, open(\"/home/ubuntu/environment/pinal_project/results.json\", \"w\"), indent=4)\n\n\ntickers = [\"AAPL\", \"ADBE\", \"AMZN\", \"GOOG\", \"KO\", \"META\", \"MSFT\", \"NVDA\", \"PEP\", \"TSLA\"]\nresults = {}\nstock_profits = {}\n\nfor ticker in tickers:\n    InitialDataPull(ticker)\n    appendData(ticker)\n    file = open('/home/ubuntu/environment/pinal_project/data/' + ticker + '.csv')\n    lines = file.readlines()\n    prices = []\n    for line in lines:\n        date, numberStr = line.split(', ')\n        price = round(float(numberStr))\n        prices.append(price)\n        results[ticker + \"_prices\"] = prices\n    \n    \n    print(ticker + \" Mean Reversion Strategy Output:\")\n    results[ticker + \"_mr_profit\"], results[ticker + \"_mr_returns\"] = meanReversionStrategy(prices) #adds results from function to the results dictionary\n    print(ticker + \" Simple Moving Average Strategy Output:\")\n    results[ticker + \"_sma_profit\"], results[ticker + \"_sma_returns\"] = simpleMovingAverageStrategy(prices) #adds results from function to the results dictionary\n    print(ticker + \" Bollinger Bands Strategy Output:\")\n    results[ticker + \"_bb_profit\"], results[ticker + \"_bb_returns\"] = BollingerBands(prices) #adds results from function to the results dictionary\n    \nfor ticker in tickers:\n    stock_profits[ticker + \"_mr_profit\"] = results[ticker + \"_mr_profit\"]\n    stock_profits[ticker + \"_sma_profit\"] = results[ticker + \"_sma_profit\"]\n    stock_profits[ticker + \"_bb_profit\"] = results[ticker + \"_bb_profit\"]\n\nbest_stock_strategy = max(stock_profits, key=stock_profits.get)\nbest_stock = best_stock_strategy.split(\"_\")[0]\nif best_stock_strategy.split(\"_\")[1] == \"mr\":\n    best_strategy = \"Mean Reversion Strategy\"\nelif best_stock_strategy.split(\"_\")[1] == \"sma\":\n    best_strategy = \"Simple Moving Average Strategy\"\nelif best_stock_strategy.split(\"_\")[1] == \"bb\":\n    best_strategy = \"Bollinger Bands Strategy\"\nelse:\n    pass\nbest_stock_number = stock_profits[best_stock_strategy]\nprint(\"\\nThe best stock is %s, using %s, with a total profit of %d.\" % (best_stock, best_strategy, best_stock_number))\nSaveResults(results)\n\n\n","undoManager":{"mark":98,"position":100,"stack":[[{"start":{"row":36,"column":2},"end":{"row":36,"column":3},"action":"remove","lines":["s"],"id":221}],[{"start":{"row":36,"column":2},"end":{"row":36,"column":3},"action":"insert","lines":["p"],"id":222},{"start":{"row":36,"column":3},"end":{"row":36,"column":4},"action":"insert","lines":["a"]},{"start":{"row":36,"column":4},"end":{"row":36,"column":5},"action":"insert","lines":["c"]},{"start":{"row":36,"column":5},"end":{"row":36,"column":6},"action":"insert","lines":["a"]},{"start":{"row":36,"column":6},"end":{"row":36,"column":7},"action":"insert","lines":["_"]},{"start":{"row":36,"column":7},"end":{"row":36,"column":8},"action":"insert","lines":["u"]},{"start":{"row":36,"column":8},"end":{"row":36,"column":9},"action":"insert","lines":["r"]},{"start":{"row":36,"column":9},"end":{"row":36,"column":10},"action":"insert","lines":["l"]}],[{"start":{"row":36,"column":10},"end":{"row":36,"column":11},"action":"insert","lines":[" "],"id":223},{"start":{"row":36,"column":11},"end":{"row":36,"column":12},"action":"insert","lines":["="]}],[{"start":{"row":36,"column":12},"end":{"row":36,"column":13},"action":"insert","lines":[" "],"id":224}],[{"start":{"row":36,"column":13},"end":{"row":36,"column":65},"action":"insert","lines":["APCA_API_BASE_URL = https://paper-api.alpaca.markets"],"id":225}],[{"start":{"row":36,"column":13},"end":{"row":36,"column":32},"action":"remove","lines":["APCA_API_BASE_URL ="],"id":226},{"start":{"row":36,"column":12},"end":{"row":36,"column":13},"action":"remove","lines":[" "]}],[{"start":{"row":36,"column":13},"end":{"row":36,"column":14},"action":"insert","lines":["'"],"id":227}],[{"start":{"row":36,"column":46},"end":{"row":36,"column":47},"action":"insert","lines":["'"],"id":228}],[{"start":{"row":32,"column":122},"end":{"row":32,"column":145},"action":"remove","lines":["# Sets URL for api pull"],"id":229}],[{"start":{"row":8,"column":34},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":231},{"start":{"row":9,"column":0},"end":{"row":9,"column":1},"action":"insert","lines":["f"]},{"start":{"row":9,"column":1},"end":{"row":9,"column":2},"action":"insert","lines":["r"]},{"start":{"row":9,"column":2},"end":{"row":9,"column":3},"action":"insert","lines":["o"]},{"start":{"row":9,"column":3},"end":{"row":9,"column":4},"action":"insert","lines":["m"]}],[{"start":{"row":9,"column":4},"end":{"row":9,"column":5},"action":"insert","lines":[" "],"id":232},{"start":{"row":9,"column":5},"end":{"row":9,"column":6},"action":"insert","lines":["a"]},{"start":{"row":9,"column":6},"end":{"row":9,"column":7},"action":"insert","lines":["p"]}],[{"start":{"row":9,"column":6},"end":{"row":9,"column":7},"action":"remove","lines":["p"],"id":233}],[{"start":{"row":9,"column":6},"end":{"row":9,"column":7},"action":"insert","lines":["l"],"id":234},{"start":{"row":9,"column":7},"end":{"row":9,"column":8},"action":"insert","lines":["l"]},{"start":{"row":9,"column":8},"end":{"row":9,"column":9},"action":"insert","lines":["p"]},{"start":{"row":9,"column":9},"end":{"row":9,"column":10},"action":"insert","lines":["a"]},{"start":{"row":9,"column":10},"end":{"row":9,"column":11},"action":"insert","lines":["c"]},{"start":{"row":9,"column":11},"end":{"row":9,"column":12},"action":"insert","lines":["a"]}],[{"start":{"row":9,"column":11},"end":{"row":9,"column":12},"action":"remove","lines":["a"],"id":235},{"start":{"row":9,"column":10},"end":{"row":9,"column":11},"action":"remove","lines":["c"]},{"start":{"row":9,"column":9},"end":{"row":9,"column":10},"action":"remove","lines":["a"]},{"start":{"row":9,"column":8},"end":{"row":9,"column":9},"action":"remove","lines":["p"]},{"start":{"row":9,"column":7},"end":{"row":9,"column":8},"action":"remove","lines":["l"]}],[{"start":{"row":9,"column":7},"end":{"row":9,"column":8},"action":"insert","lines":["p"],"id":236},{"start":{"row":9,"column":8},"end":{"row":9,"column":9},"action":"insert","lines":["a"]},{"start":{"row":9,"column":9},"end":{"row":9,"column":10},"action":"insert","lines":["c"]},{"start":{"row":9,"column":10},"end":{"row":9,"column":11},"action":"insert","lines":["a"]},{"start":{"row":9,"column":11},"end":{"row":9,"column":12},"action":"insert","lines":["."]},{"start":{"row":9,"column":12},"end":{"row":9,"column":13},"action":"insert","lines":["t"]},{"start":{"row":9,"column":13},"end":{"row":9,"column":14},"action":"insert","lines":["r"]},{"start":{"row":9,"column":14},"end":{"row":9,"column":15},"action":"insert","lines":["a"]},{"start":{"row":9,"column":15},"end":{"row":9,"column":16},"action":"insert","lines":["d"]},{"start":{"row":9,"column":16},"end":{"row":9,"column":17},"action":"insert","lines":["i"]},{"start":{"row":9,"column":17},"end":{"row":9,"column":18},"action":"insert","lines":["n"]}],[{"start":{"row":9,"column":17},"end":{"row":9,"column":18},"action":"remove","lines":["n"],"id":237},{"start":{"row":9,"column":16},"end":{"row":9,"column":17},"action":"remove","lines":["i"]},{"start":{"row":9,"column":15},"end":{"row":9,"column":16},"action":"remove","lines":["d"]},{"start":{"row":9,"column":14},"end":{"row":9,"column":15},"action":"remove","lines":["a"]}],[{"start":{"row":9,"column":14},"end":{"row":9,"column":15},"action":"insert","lines":["a"],"id":238},{"start":{"row":9,"column":15},"end":{"row":9,"column":16},"action":"insert","lines":["d"]},{"start":{"row":9,"column":16},"end":{"row":9,"column":17},"action":"insert","lines":["i"]},{"start":{"row":9,"column":17},"end":{"row":9,"column":18},"action":"insert","lines":["n"]},{"start":{"row":9,"column":18},"end":{"row":9,"column":19},"action":"insert","lines":["g"]},{"start":{"row":9,"column":19},"end":{"row":9,"column":20},"action":"insert","lines":["."]},{"start":{"row":9,"column":20},"end":{"row":9,"column":21},"action":"insert","lines":["c"]},{"start":{"row":9,"column":21},"end":{"row":9,"column":22},"action":"insert","lines":["l"]},{"start":{"row":9,"column":22},"end":{"row":9,"column":23},"action":"insert","lines":["i"]},{"start":{"row":9,"column":23},"end":{"row":9,"column":24},"action":"insert","lines":["e"]},{"start":{"row":9,"column":24},"end":{"row":9,"column":25},"action":"insert","lines":["n"]},{"start":{"row":9,"column":25},"end":{"row":9,"column":26},"action":"insert","lines":["t"]}],[{"start":{"row":9,"column":26},"end":{"row":9,"column":27},"action":"insert","lines":[" "],"id":239},{"start":{"row":9,"column":27},"end":{"row":9,"column":28},"action":"insert","lines":["i"]},{"start":{"row":9,"column":28},"end":{"row":9,"column":29},"action":"insert","lines":["m"]},{"start":{"row":9,"column":29},"end":{"row":9,"column":30},"action":"insert","lines":["p"]},{"start":{"row":9,"column":30},"end":{"row":9,"column":31},"action":"insert","lines":["o"]},{"start":{"row":9,"column":31},"end":{"row":9,"column":32},"action":"insert","lines":["r"]},{"start":{"row":9,"column":32},"end":{"row":9,"column":33},"action":"insert","lines":["t"]}],[{"start":{"row":9,"column":33},"end":{"row":9,"column":34},"action":"insert","lines":[" "],"id":240},{"start":{"row":9,"column":34},"end":{"row":9,"column":35},"action":"insert","lines":["T"]},{"start":{"row":9,"column":35},"end":{"row":9,"column":36},"action":"insert","lines":["r"]},{"start":{"row":9,"column":36},"end":{"row":9,"column":37},"action":"insert","lines":["a"]},{"start":{"row":9,"column":37},"end":{"row":9,"column":38},"action":"insert","lines":["d"]},{"start":{"row":9,"column":38},"end":{"row":9,"column":39},"action":"insert","lines":["i"]},{"start":{"row":9,"column":39},"end":{"row":9,"column":40},"action":"insert","lines":["n"]},{"start":{"row":9,"column":40},"end":{"row":9,"column":41},"action":"insert","lines":["g"]},{"start":{"row":9,"column":41},"end":{"row":9,"column":42},"action":"insert","lines":["C"]},{"start":{"row":9,"column":42},"end":{"row":9,"column":43},"action":"insert","lines":["l"]},{"start":{"row":9,"column":43},"end":{"row":9,"column":44},"action":"insert","lines":["i"]},{"start":{"row":9,"column":44},"end":{"row":9,"column":45},"action":"insert","lines":["e"]},{"start":{"row":9,"column":45},"end":{"row":9,"column":46},"action":"insert","lines":["n"]}],[{"start":{"row":9,"column":46},"end":{"row":9,"column":47},"action":"insert","lines":["t"],"id":241}],[{"start":{"row":9,"column":47},"end":{"row":10,"column":0},"action":"insert","lines":["",""],"id":242}],[{"start":{"row":8,"column":34},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":243},{"start":{"row":9,"column":0},"end":{"row":10,"column":0},"action":"insert","lines":["",""]},{"start":{"row":10,"column":0},"end":{"row":11,"column":0},"action":"insert","lines":["",""]},{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":88},"action":"insert","lines":["########################################################################################"],"id":244}],[{"start":{"row":12,"column":88},"end":{"row":13,"column":0},"action":"insert","lines":["",""],"id":245},{"start":{"row":13,"column":0},"end":{"row":13,"column":1},"action":"insert","lines":["#"]}],[{"start":{"row":13,"column":1},"end":{"row":13,"column":2},"action":"insert","lines":[" "],"id":246},{"start":{"row":13,"column":2},"end":{"row":13,"column":3},"action":"insert","lines":["S"]},{"start":{"row":13,"column":3},"end":{"row":13,"column":4},"action":"insert","lines":["e"]},{"start":{"row":13,"column":4},"end":{"row":13,"column":5},"action":"insert","lines":["t"]},{"start":{"row":13,"column":5},"end":{"row":13,"column":6},"action":"insert","lines":["s"]}],[{"start":{"row":13,"column":5},"end":{"row":13,"column":6},"action":"remove","lines":["s"],"id":247}],[{"start":{"row":13,"column":5},"end":{"row":13,"column":6},"action":"insert","lines":["s"],"id":248}],[{"start":{"row":13,"column":5},"end":{"row":13,"column":6},"action":"remove","lines":["s"],"id":249}],[{"start":{"row":13,"column":5},"end":{"row":13,"column":6},"action":"insert","lines":[" "],"id":250},{"start":{"row":13,"column":6},"end":{"row":13,"column":7},"action":"insert","lines":["u"]},{"start":{"row":13,"column":7},"end":{"row":13,"column":8},"action":"insert","lines":["p"]}],[{"start":{"row":13,"column":8},"end":{"row":13,"column":9},"action":"insert","lines":[" "],"id":251}],[{"start":{"row":13,"column":9},"end":{"row":13,"column":10},"action":"insert","lines":["A"],"id":252},{"start":{"row":13,"column":10},"end":{"row":13,"column":11},"action":"insert","lines":["a"]}],[{"start":{"row":13,"column":10},"end":{"row":13,"column":11},"action":"remove","lines":["a"],"id":253}],[{"start":{"row":13,"column":10},"end":{"row":13,"column":11},"action":"insert","lines":["l"],"id":254},{"start":{"row":13,"column":11},"end":{"row":13,"column":12},"action":"insert","lines":["p"]},{"start":{"row":13,"column":12},"end":{"row":13,"column":13},"action":"insert","lines":["a"]},{"start":{"row":13,"column":13},"end":{"row":13,"column":14},"action":"insert","lines":["c"]},{"start":{"row":13,"column":14},"end":{"row":13,"column":15},"action":"insert","lines":["a"]}],[{"start":{"row":13,"column":15},"end":{"row":13,"column":16},"action":"insert","lines":[" "],"id":255},{"start":{"row":13,"column":16},"end":{"row":13,"column":17},"action":"insert","lines":["t"]},{"start":{"row":13,"column":17},"end":{"row":13,"column":18},"action":"insert","lines":["r"]},{"start":{"row":13,"column":18},"end":{"row":13,"column":19},"action":"insert","lines":["a"]},{"start":{"row":13,"column":19},"end":{"row":13,"column":20},"action":"insert","lines":["d"]},{"start":{"row":13,"column":20},"end":{"row":13,"column":21},"action":"insert","lines":["i"]},{"start":{"row":13,"column":21},"end":{"row":13,"column":22},"action":"insert","lines":["n"]}],[{"start":{"row":13,"column":21},"end":{"row":13,"column":22},"action":"remove","lines":["n"],"id":256},{"start":{"row":13,"column":20},"end":{"row":13,"column":21},"action":"remove","lines":["i"]},{"start":{"row":13,"column":19},"end":{"row":13,"column":20},"action":"remove","lines":["d"]},{"start":{"row":13,"column":18},"end":{"row":13,"column":19},"action":"remove","lines":["a"]},{"start":{"row":13,"column":17},"end":{"row":13,"column":18},"action":"remove","lines":["r"]},{"start":{"row":13,"column":16},"end":{"row":13,"column":17},"action":"remove","lines":["t"]}],[{"start":{"row":13,"column":16},"end":{"row":13,"column":17},"action":"insert","lines":["T"],"id":257},{"start":{"row":13,"column":17},"end":{"row":13,"column":18},"action":"insert","lines":["r"]},{"start":{"row":13,"column":18},"end":{"row":13,"column":19},"action":"insert","lines":["a"]},{"start":{"row":13,"column":19},"end":{"row":13,"column":20},"action":"insert","lines":["d"]},{"start":{"row":13,"column":20},"end":{"row":13,"column":21},"action":"insert","lines":["i"]},{"start":{"row":13,"column":21},"end":{"row":13,"column":22},"action":"insert","lines":["n"]},{"start":{"row":13,"column":22},"end":{"row":13,"column":23},"action":"insert","lines":["g"]}],[{"start":{"row":13,"column":23},"end":{"row":13,"column":24},"action":"insert","lines":[" "],"id":258},{"start":{"row":13,"column":24},"end":{"row":13,"column":25},"action":"insert","lines":["C"]},{"start":{"row":13,"column":25},"end":{"row":13,"column":26},"action":"insert","lines":["l"]},{"start":{"row":13,"column":26},"end":{"row":13,"column":27},"action":"insert","lines":["i"]},{"start":{"row":13,"column":27},"end":{"row":13,"column":28},"action":"insert","lines":["e"]},{"start":{"row":13,"column":28},"end":{"row":13,"column":29},"action":"insert","lines":["n"]},{"start":{"row":13,"column":29},"end":{"row":13,"column":30},"action":"insert","lines":["t"]}],[{"start":{"row":14,"column":47},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":259},{"start":{"row":15,"column":0},"end":{"row":16,"column":0},"action":"insert","lines":["",""]},{"start":{"row":16,"column":0},"end":{"row":16,"column":1},"action":"insert","lines":["t"]},{"start":{"row":16,"column":1},"end":{"row":16,"column":2},"action":"insert","lines":["r"]},{"start":{"row":16,"column":2},"end":{"row":16,"column":3},"action":"insert","lines":["a"]},{"start":{"row":16,"column":3},"end":{"row":16,"column":4},"action":"insert","lines":["d"]},{"start":{"row":16,"column":4},"end":{"row":16,"column":5},"action":"insert","lines":["i"]},{"start":{"row":16,"column":5},"end":{"row":16,"column":6},"action":"insert","lines":["n"]},{"start":{"row":16,"column":6},"end":{"row":16,"column":7},"action":"insert","lines":["g"]}],[{"start":{"row":16,"column":7},"end":{"row":16,"column":8},"action":"insert","lines":["_"],"id":260},{"start":{"row":16,"column":8},"end":{"row":16,"column":9},"action":"insert","lines":["c"]},{"start":{"row":16,"column":9},"end":{"row":16,"column":10},"action":"insert","lines":["l"]},{"start":{"row":16,"column":10},"end":{"row":16,"column":11},"action":"insert","lines":["i"]},{"start":{"row":16,"column":11},"end":{"row":16,"column":12},"action":"insert","lines":["n"]},{"start":{"row":16,"column":12},"end":{"row":16,"column":13},"action":"insert","lines":["e"]},{"start":{"row":16,"column":13},"end":{"row":16,"column":14},"action":"insert","lines":["t"]}],[{"start":{"row":16,"column":13},"end":{"row":16,"column":14},"action":"remove","lines":["t"],"id":261},{"start":{"row":16,"column":12},"end":{"row":16,"column":13},"action":"remove","lines":["e"]},{"start":{"row":16,"column":11},"end":{"row":16,"column":12},"action":"remove","lines":["n"]}],[{"start":{"row":16,"column":11},"end":{"row":16,"column":12},"action":"insert","lines":["e"],"id":262},{"start":{"row":16,"column":12},"end":{"row":16,"column":13},"action":"insert","lines":["n"]},{"start":{"row":16,"column":13},"end":{"row":16,"column":14},"action":"insert","lines":["t"]}],[{"start":{"row":16,"column":14},"end":{"row":16,"column":15},"action":"insert","lines":[" "],"id":263},{"start":{"row":16,"column":15},"end":{"row":16,"column":16},"action":"insert","lines":["="]}],[{"start":{"row":16,"column":16},"end":{"row":16,"column":17},"action":"insert","lines":[" "],"id":264}],[{"start":{"row":16,"column":17},"end":{"row":16,"column":18},"action":"insert","lines":["T"],"id":265},{"start":{"row":16,"column":18},"end":{"row":16,"column":19},"action":"insert","lines":["r"]},{"start":{"row":16,"column":19},"end":{"row":16,"column":20},"action":"insert","lines":["a"]},{"start":{"row":16,"column":20},"end":{"row":16,"column":21},"action":"insert","lines":["d"]},{"start":{"row":16,"column":21},"end":{"row":16,"column":22},"action":"insert","lines":["i"]},{"start":{"row":16,"column":22},"end":{"row":16,"column":23},"action":"insert","lines":["n"]},{"start":{"row":16,"column":23},"end":{"row":16,"column":24},"action":"insert","lines":["g"]},{"start":{"row":16,"column":24},"end":{"row":16,"column":25},"action":"insert","lines":["C"]},{"start":{"row":16,"column":25},"end":{"row":16,"column":26},"action":"insert","lines":["l"]},{"start":{"row":16,"column":26},"end":{"row":16,"column":27},"action":"insert","lines":["i"]},{"start":{"row":16,"column":27},"end":{"row":16,"column":28},"action":"insert","lines":["e"]},{"start":{"row":16,"column":28},"end":{"row":16,"column":29},"action":"insert","lines":["n"]}],[{"start":{"row":16,"column":29},"end":{"row":16,"column":30},"action":"insert","lines":["t"],"id":266}],[{"start":{"row":16,"column":30},"end":{"row":16,"column":32},"action":"insert","lines":["()"],"id":267}],[{"start":{"row":16,"column":31},"end":{"row":16,"column":33},"action":"insert","lines":["\"\""],"id":268}],[{"start":{"row":16,"column":32},"end":{"row":16,"column":52},"action":"insert","lines":["PKEZEQVBLHW7O9S1VDD7"],"id":269}],[{"start":{"row":16,"column":53},"end":{"row":16,"column":54},"action":"insert","lines":[","],"id":270}],[{"start":{"row":16,"column":54},"end":{"row":16,"column":56},"action":"insert","lines":["\"\""],"id":271}],[{"start":{"row":16,"column":55},"end":{"row":16,"column":95},"action":"insert","lines":["gjHAA8Awz6wS0LT89X12NnoG8evWQtfvVJaBAmrG"],"id":272}],[{"start":{"row":17,"column":0},"end":{"row":17,"column":1},"action":"insert","lines":["p"],"id":273},{"start":{"row":17,"column":1},"end":{"row":17,"column":2},"action":"insert","lines":["r"]},{"start":{"row":17,"column":2},"end":{"row":17,"column":3},"action":"insert","lines":["i"]},{"start":{"row":17,"column":3},"end":{"row":17,"column":4},"action":"insert","lines":["n"]},{"start":{"row":17,"column":4},"end":{"row":17,"column":5},"action":"insert","lines":["t"]}],[{"start":{"row":17,"column":5},"end":{"row":17,"column":7},"action":"insert","lines":["()"],"id":274}],[{"start":{"row":17,"column":6},"end":{"row":17,"column":7},"action":"insert","lines":["t"],"id":275},{"start":{"row":17,"column":7},"end":{"row":17,"column":8},"action":"insert","lines":["r"]},{"start":{"row":17,"column":8},"end":{"row":17,"column":9},"action":"insert","lines":["a"]},{"start":{"row":17,"column":9},"end":{"row":17,"column":10},"action":"insert","lines":["d"]},{"start":{"row":17,"column":10},"end":{"row":17,"column":11},"action":"insert","lines":["i"]},{"start":{"row":17,"column":11},"end":{"row":17,"column":12},"action":"insert","lines":["n"]},{"start":{"row":17,"column":12},"end":{"row":17,"column":13},"action":"insert","lines":["g"]},{"start":{"row":17,"column":13},"end":{"row":17,"column":14},"action":"insert","lines":["_"]}],[{"start":{"row":17,"column":14},"end":{"row":17,"column":15},"action":"insert","lines":["c"],"id":276},{"start":{"row":17,"column":15},"end":{"row":17,"column":16},"action":"insert","lines":["l"]},{"start":{"row":17,"column":16},"end":{"row":17,"column":17},"action":"insert","lines":["i"]},{"start":{"row":17,"column":17},"end":{"row":17,"column":18},"action":"insert","lines":["n"]}],[{"start":{"row":17,"column":17},"end":{"row":17,"column":18},"action":"remove","lines":["n"],"id":277}],[{"start":{"row":17,"column":17},"end":{"row":17,"column":18},"action":"insert","lines":["e"],"id":278},{"start":{"row":17,"column":18},"end":{"row":17,"column":19},"action":"insert","lines":["n"]},{"start":{"row":17,"column":19},"end":{"row":17,"column":20},"action":"insert","lines":["t"]},{"start":{"row":17,"column":20},"end":{"row":17,"column":21},"action":"insert","lines":["."]},{"start":{"row":17,"column":21},"end":{"row":17,"column":22},"action":"insert","lines":["g"]},{"start":{"row":17,"column":22},"end":{"row":17,"column":23},"action":"insert","lines":["e"]},{"start":{"row":17,"column":23},"end":{"row":17,"column":24},"action":"insert","lines":["t"]}],[{"start":{"row":17,"column":24},"end":{"row":17,"column":26},"action":"insert","lines":["()"],"id":279}],[{"start":{"row":17,"column":26},"end":{"row":17,"column":27},"action":"insert","lines":["."],"id":280}],[{"start":{"row":17,"column":24},"end":{"row":17,"column":25},"action":"insert","lines":["_"],"id":281},{"start":{"row":17,"column":25},"end":{"row":17,"column":26},"action":"insert","lines":["a"]},{"start":{"row":17,"column":26},"end":{"row":17,"column":27},"action":"insert","lines":["c"]},{"start":{"row":17,"column":27},"end":{"row":17,"column":28},"action":"insert","lines":["c"]},{"start":{"row":17,"column":28},"end":{"row":17,"column":29},"action":"insert","lines":["o"]},{"start":{"row":17,"column":29},"end":{"row":17,"column":30},"action":"insert","lines":["u"]},{"start":{"row":17,"column":30},"end":{"row":17,"column":31},"action":"insert","lines":["n"]},{"start":{"row":17,"column":31},"end":{"row":17,"column":32},"action":"insert","lines":["t"]}],[{"start":{"row":17,"column":35},"end":{"row":17,"column":36},"action":"insert","lines":["a"],"id":282},{"start":{"row":17,"column":36},"end":{"row":17,"column":37},"action":"insert","lines":["c"]},{"start":{"row":17,"column":37},"end":{"row":17,"column":38},"action":"insert","lines":["c"]},{"start":{"row":17,"column":38},"end":{"row":17,"column":39},"action":"insert","lines":["o"]},{"start":{"row":17,"column":39},"end":{"row":17,"column":40},"action":"insert","lines":["u"]},{"start":{"row":17,"column":40},"end":{"row":17,"column":41},"action":"insert","lines":["n"]},{"start":{"row":17,"column":41},"end":{"row":17,"column":42},"action":"insert","lines":["t"]},{"start":{"row":17,"column":42},"end":{"row":17,"column":43},"action":"insert","lines":["_"]},{"start":{"row":17,"column":43},"end":{"row":17,"column":44},"action":"insert","lines":["n"]},{"start":{"row":17,"column":44},"end":{"row":17,"column":45},"action":"insert","lines":["u"]},{"start":{"row":17,"column":45},"end":{"row":17,"column":46},"action":"insert","lines":["m"]},{"start":{"row":17,"column":46},"end":{"row":17,"column":47},"action":"insert","lines":["b"]}],[{"start":{"row":17,"column":47},"end":{"row":17,"column":48},"action":"insert","lines":["e"],"id":283},{"start":{"row":17,"column":48},"end":{"row":17,"column":49},"action":"insert","lines":["r"]}],[{"start":{"row":18,"column":0},"end":{"row":18,"column":50},"action":"insert","lines":["print(trading_client.get_account().account_number)"],"id":284}],[{"start":{"row":18,"column":35},"end":{"row":18,"column":49},"action":"remove","lines":["account_number"],"id":285},{"start":{"row":18,"column":35},"end":{"row":18,"column":36},"action":"insert","lines":["b"]},{"start":{"row":18,"column":36},"end":{"row":18,"column":37},"action":"insert","lines":["u"]},{"start":{"row":18,"column":37},"end":{"row":18,"column":38},"action":"insert","lines":["y"]},{"start":{"row":18,"column":38},"end":{"row":18,"column":39},"action":"insert","lines":["i"]},{"start":{"row":18,"column":39},"end":{"row":18,"column":40},"action":"insert","lines":["n"]},{"start":{"row":18,"column":40},"end":{"row":18,"column":41},"action":"insert","lines":["g"]},{"start":{"row":18,"column":41},"end":{"row":18,"column":42},"action":"insert","lines":["_"]},{"start":{"row":18,"column":42},"end":{"row":18,"column":43},"action":"insert","lines":["p"]},{"start":{"row":18,"column":43},"end":{"row":18,"column":44},"action":"insert","lines":["o"]},{"start":{"row":18,"column":44},"end":{"row":18,"column":45},"action":"insert","lines":["w"]},{"start":{"row":18,"column":45},"end":{"row":18,"column":46},"action":"insert","lines":["e"]},{"start":{"row":18,"column":46},"end":{"row":18,"column":47},"action":"insert","lines":["r"]}],[{"start":{"row":18,"column":35},"end":{"row":18,"column":47},"action":"remove","lines":["buying_power"],"id":286}],[{"start":{"row":18,"column":35},"end":{"row":18,"column":36},"action":"insert","lines":["b"],"id":287},{"start":{"row":18,"column":36},"end":{"row":18,"column":37},"action":"insert","lines":["n"]}],[{"start":{"row":18,"column":36},"end":{"row":18,"column":37},"action":"remove","lines":["n"],"id":288}],[{"start":{"row":18,"column":36},"end":{"row":18,"column":37},"action":"insert","lines":["u"],"id":289},{"start":{"row":18,"column":37},"end":{"row":18,"column":38},"action":"insert","lines":["y"]},{"start":{"row":18,"column":38},"end":{"row":18,"column":39},"action":"insert","lines":["i"]},{"start":{"row":18,"column":39},"end":{"row":18,"column":40},"action":"insert","lines":["n"]},{"start":{"row":18,"column":40},"end":{"row":18,"column":41},"action":"insert","lines":["g"]},{"start":{"row":18,"column":41},"end":{"row":18,"column":42},"action":"insert","lines":["_"]},{"start":{"row":18,"column":42},"end":{"row":18,"column":43},"action":"insert","lines":["p"]}],[{"start":{"row":18,"column":43},"end":{"row":18,"column":44},"action":"insert","lines":["o"],"id":290},{"start":{"row":18,"column":44},"end":{"row":18,"column":45},"action":"insert","lines":["w"]},{"start":{"row":18,"column":45},"end":{"row":18,"column":46},"action":"insert","lines":["e"]},{"start":{"row":18,"column":46},"end":{"row":18,"column":47},"action":"insert","lines":["r"]}],[{"start":{"row":0,"column":0},"end":{"row":120,"column":46},"action":"remove","lines":["########################################################################################","# imports libraries","","import requests","import json","import networkx as nx","from networkx.classes.function import path_weight","from itertools import permutations","from itertools import combinations","","","","########################################################################################","# Set up Alpaca Trading Client","from alpaca.trading.client import TradingClient","","trading_client = TradingClient(\"PKEZEQVBLHW7O9S1VDD7\",\"gjHAA8Awz6wS0LT89X12NnoG8evWQtfvVJaBAmrG\")","print(trading_client.get_account().account_number)","print(trading_client.get_account().buying_power)","","########################################################################################","# Sets cryptos and tickers and loads them in from the api","","cryptocurrencies = {","    \"ripple\": \"xrp\",","    \"cardano\": \"ada\",","    \"bitcoin-cash\": \"bch\",","    \"eos\": \"eos\",","    \"litecoin\": \"ltc\",","    \"ethereum\": \"eth\",","    \"bitcoin\": \"btc\",","    \"tether\": \"usdt\",","    \"binancecoin\": \"bnb\",","    \"solana\": \"sol\",","    \"dogecoin\": \"doge\",","    \"shiba-inu\": \"shib\",","    \"cronos\": \"cro\"","}","cryptos = list(cryptocurrencies.keys())","tickers = list(cryptocurrencies.values())","","url = 'https://api.coingecko.com/api/v3/simple/price?ids=' + ','.join(cryptos) + '&vs_currencies=' + ','.join(tickers)    ","request = requests.get(url) ","initial_crypto_dict = json.loads(request.text)   ","","alpaca_url = 'https://paper-api.alpaca.markets'","","","","","","","# initial_crypto_dict = {'bitcoin': {'xrp': 113989, 'bch': 107.728, 'eos': 67072, 'ltc': 702.546, 'eth': 19.895436, 'btc': 1.0}, 'bitcoin-cash': {'xrp': 1058, 'bch': 1.0, 'eos': 622.379, 'ltc': 6.51915, 'eth': 0.18462007, 'btc': 0.0092783}, 'cardano': {'xrp': 1.015982, 'bch': 0.00096017, 'eos': 0.59780706, 'ltc': 0.00626177, 'eth': 0.00017733, 'btc': 8.91e-06}, 'eos': {'xrp': 1.699048, 'bch': 0.00160572, 'eos': 1.0, 'ltc': 0.0104717, 'eth': 0.00029655, 'btc': 1.49e-05}, 'ethereum': {'xrp': 5728, 'bch': 5.413652, 'eos': 3371, 'ltc': 35.305118, 'eth': 1.0, 'btc': 0.05024759}, 'litecoin': {'xrp': 162.19, 'bch': 0.15328135, 'eos': 95.433, 'ltc': 1.0, 'eth': 0.028309, 'btc': 0.0014227}, 'ripple': {'xrp': 1.0, 'bch': 0.00094513, 'eos': 0.58844056, 'ltc': 0.00616366, 'eth': 0.00017455, 'btc': 8.77e-06}}","# Pulling from https://api.coingecko.com/api/v3/simple/price?ids=ripple,cardano,bitcoin-cash,eos,litecoin,ethereum,bitcoin&vs_currencies=xrp,ada,bch,eos,ltc,eth,btc","","crypto_dict = {}   ","for old_key, value in initial_crypto_dict.items():  ","    new_key = cryptocurrencies[old_key]     ","    crypto_dict[new_key] = value        ","    ","########################################################################################","# Create a graph and adds edges","","g = nx.DiGraph() ","edges = []  ","for ticker1, ticker2 in permutations(tickers,2):  ","    try:","        rate = crypto_dict[ticker1][ticker2]   ","    except KeyError:","        continue   ","    edges.append((ticker1,ticker2,rate))    ","","g.add_weighted_edges_from(edges)        ","","path_weights = {}           ","path_weights_reverse = {} ","","########################################################################################","# Calculate the weight (currency exchange rate) of every path","","for t1, t2 in combinations(g.nodes, 2):    ","    print(\"All paths between\", t1, \"and\", t2, \"-----------------------------\\n\")","    if nx.has_path(g,t1,t2) == False:    ","        print(\"There are no paths between\",t1, \"and\", t2, \"\\n\")","    for path in nx.all_simple_paths(g, t1, t2):","        path_weight_to = 1.0            ","        for i in range(len(path) - 1):  ","            path_weight_to *= g[path[i]][path[i+1]]['weight']","        print(\"Path to:\", path,\"---- Path weight: \", path_weight_to)","        ","        path.reverse()                  ","        path_weight_from = 1.0     ","        for i in range(len(path) - 1):","            path_weight_from *= g[path[i]][path[i+1]]['weight']","        print(\"Path from:\", path,\"---- Path weight: \", path_weight_from)","        path_weight = path_weight_to * path_weight_from    ","        print(\"Total path weight:\", path_weight, \"\\n\")","        ","        path_weights_reverse[str(path)] = path_weight ","        path.reverse()                                ","        path_weights[str(path)] = path_weight         ","        ","    print(\"-----------------------------------------------------\\n\")","","","########################################################################################","# Calculate the best and worst weights","","# Calulates and prints greatest weight factor & path","best_path = max(path_weights, key=lambda k: path_weights[k])","best_path_reverse = max(path_weights_reverse, key=lambda k: path_weights_reverse[k])","best_value = path_weights[best_path]","print(\"Greatest Paths weight factor:\", best_value)","print(\"Paths\", best_path, best_path_reverse, \"\\n\")","","# Calulates and prints smallest weight factor & path","worst_path = min(path_weights, key=lambda k: path_weights[k])","worst_path_reverse = min(path_weights_reverse, key=lambda k: path_weights_reverse[k])","worst_value = path_weights[worst_path]","print(\"Smallest Paths weight factor:\", worst_value)","print(\"Paths\", worst_path, worst_path_reverse)"],"id":291},{"start":{"row":0,"column":0},"end":{"row":216,"column":0},"action":"insert","lines":["import json","import requests     #imports json and requests functionality","","","","def InitialDataPull(tickers):       #brings data in","    url = 'http://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=' + ticker + '&outputsize=full&apikey=6K822N6TX3TU6KBP'","    request = requests.get(url)         #brings data into code and creates a dictionary of it","    rqstDictionary = json.loads(request.text)","","    key1 = \"Time Series (Daily)\"","    # Need all the dates","    key2 = \"4. close\"","    ","    file = open(\"/home/ubuntu/environment/final_project/data/\"+ticker+\".csv\", \"w\")","","    lines = []","","    for date in rqstDictionary[key1].keys():        #adds prices","        lines.append(date + \", \" + rqstDictionary[key1][date][key2] + \"\\n\")","","    lines = lines[::-1]         #flips data","    file.writelines(lines)      ","    file.close()","","def appendData(tickers):            #adds new data","    url = 'http://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=' + ticker + '&outputsize=full&apikey=6K822N6TX3TU6KBP'","    request = requests.get(url)","    rqstDictionary = json.loads(request.text)","    ","    key1 = \"Time Series (Daily)\"","    # Need all the dates","    key2 = \"4. close\"","    csvFile = open(\"/home/ubuntu/environment/final_project/data/\"+ticker+\".csv\", \"r\")","    lines = csvFile.readlines()","    csvFile.close()","    ","    latest_date = lines[-1].split(\", \")[0]","    ","    newLines = []","    for date in rqstDictionary[key1].keys():","        if date == latest_date:","            break","        else:","            newLines.append(date + ', ' + rqstDictionary[key1][date][key2] + \"\\n\")","            ","    newLines = newLines[::-1]       #flips data","    ","    file = open(\"/home/ubuntu/environment/final_project/data/\"+ticker+\".csv\", \"a\")","    file.writelines(newLines)","    file.close()     ","    ","def meanReversionStrategy(prices):      #defines mean reversion strategy","    first_buy = 0","    buy = 0           #initial values","    sell = 0","    profit = 0","    total_profit = 0","    for i in range(len(prices)):    ","        five_day_avg = round((prices[i-5]+prices[i-4]+prices[i-3]+prices[i-2]+prices[i-1])/5, 2)   ","        if prices[i] < five_day_avg * .98 and buy == 0:    ","            if first_buy == 0:          ","                first_buy = prices[i]","                buy = prices[i]","            else:","                buy = prices[i]","            # print(\"buying at\", buy) ","        elif prices[i] > five_day_avg * 1.02 and buy != 0:  ","            sell = prices[i]","            profit = round(sell-buy, 2)","            total_profit += profit","            total_profit = round(total_profit, 2)","            buy = 0               ","            # print(\"selling at\", sell)        ","            # print(\"trade profit:\", profit)","        else:","            pass","        if i == len(prices)-1 and prices[i] < five_day_avg * .98 and buy > 0:","            print(\"You should buy this stock today!\")","        elif i == len(prices)-1 and prices[i] > five_day_avg and buy == 0:","            print(\"You should sell this stock today!\")","        else:","            pass","    ","    ","    returns = str(round((total_profit/first_buy*100), 2))+\"%\"","    print(\"Total profit:\", total_profit)","    # print(\"First buy:\", first_buy)","    print(\"Percent return:\", returns)","    print(\"---------------\")","    return total_profit, returns","","def simpleMovingAverageStrategy(prices):    #defines simple moving average strategy","    first_buy = 0","    buy = 0           #initial values","    sell = 0","    profit = 0","    total_profit = 0","    for i in range(len(prices)):   ","        five_day_avg = round((prices[i-5]+prices[i-4]+prices[i-3]+prices[i-2]+prices[i-1])/5, 2)  ","        if prices[i] > five_day_avg and buy == 0:   ","            if first_buy == 0:         ","                first_buy = prices[i]","                buy = prices[i]","            else:","                buy = prices[i]","            # print(\"buying at\", buy)    ","        elif prices[i] < five_day_avg and buy != 0: ","            sell = prices[i]","            profit = round(sell-buy, 2)","            total_profit += profit         ","            total_profit = round(total_profit, 2)","            buy = 0                    ","            # print(\"selling at\", sell)       ","            # print(\"trade profit:\", profit)","        else:","            pass","        if i == len(prices)-1 and prices[i] > five_day_avg and buy > 0:","            print(\"You should buy this stock today!\")","        elif i == len(prices)-1 and prices[i] < five_day_avg and buy == 0:","            print(\"You should sell this stock today!\")","        else:","            pass","        ","    returns = str(round((total_profit/first_buy*100),2))+\"%\" ","    print(\"Total profit:\", total_profit)","    # print(\"First buy:\", first_buy)","    print(\"Percent return:\", returns)","    print(\"---------------\")","    return total_profit, returns","","def BollingerBands(prices):","    first_buy = 0","    buy = 0           #initial values","    sell = 0","    profit = 0","    total_profit = 0","    for i in range(len(prices)):   ","        five_day_avg = round((prices[i-5]+prices[i-4]+prices[i-3]+prices[i-2]+prices[i-1])/5, 2)  ","        if prices[i] > five_day_avg * 1.05 and buy == 0:   ","            if first_buy == 0:         ","                first_buy = prices[i]","                buy = prices[i]","            else:","                buy = prices[i]","            # print(\"buying at\", buy)    ","        elif prices[i] < five_day_avg * 0.95 and buy != 0: ","            sell = prices[i]","            profit = round(sell-buy, 2)","            total_profit += profit         ","            total_profit = round(total_profit, 2)","            buy = 0                    ","            # print(\"selling at\", sell)       ","            # print(\"trade profit:\", profit)","        else:","            pass","        if i == len(prices)-1 and prices[i] > five_day_avg * 1.05 and buy > 0:","            print(\"You should buy this stock today!\")","        elif i ==len(prices)-1 and prices[i] < five_day_avg and buy == 0:","            print(\"You should sell this stock today!\")","        else:","            pass","        ","    returns = str(round((total_profit/first_buy*100),2))+\"%\" ","    print(\"Total profit:\", total_profit)","    # print(\"First buy:\", first_buy)","    print(\"Percent return:\", returns)","    print(\"---------------\")","    return total_profit, returns","","def saveResults(results):   #saves results dictionary to a json","    json.dump(results, open(\"/home/ubuntu/environment/final_project/results.json\", \"w\"), indent=4)","","","tickers = [\"AAPL\", \"ADBE\", \"AMZN\", \"GOOG\", \"KO\", \"META\", \"MSFT\", \"NVDA\", \"PEP\", \"TSLA\"]","results = {}","stock_profits = {}","","for ticker in tickers:","    #InitialDataPull(ticker)","    appendData(ticker)","    file = open('/home/ubuntu/environment/final_project/data/' + ticker + '.csv')","    lines = file.readlines()","    prices = []","    for line in lines:","        date, numberStr = line.split(', ')","        price = round(float(numberStr))","        prices.append(price)","        results[ticker + \"_prices\"] = prices","    ","    ","    print(ticker + \" Mean Reversion Strategy Output:\")","    results[ticker + \"_mr_profit\"], results[ticker + \"_mr_returns\"] = meanReversionStrategy(prices) #adds results from function to the results dictionary","    print(ticker + \" Simple Moving Average Strategy Output:\")","    results[ticker + \"_sma_profit\"], results[ticker + \"_sma_returns\"] = simpleMovingAverageStrategy(prices) #adds results from function to the results dictionary","    print(ticker + \" Bollinger Bands Strategy Output:\")","    results[ticker + \"_bb_profit\"], results[ticker + \"_bb_returns\"] = BollingerBands(prices) #adds results from function to the results dictionary","    ","for ticker in tickers:","    stock_profits[ticker + \"_mr_profit\"] = results[ticker + \"_mr_profit\"]","    stock_profits[ticker + \"_sma_profit\"] = results[ticker + \"_sma_profit\"]","    stock_profits[ticker + \"_bb_profit\"] = results[ticker + \"_bb_profit\"]","","best_stock_strategy = max(stock_profits, key=stock_profits.get)","best_stock = best_stock_strategy.split(\"_\")[0]","if best_stock_strategy.split(\"_\")[1] == \"mr\":","    best_strategy = \"Mean Reversion Strategy\"","elif best_stock_strategy.split(\"_\")[1] == \"sma\":","    best_strategy = \"Simple Moving Average Strategy\"","elif best_stock_strategy.split(\"_\")[1] == \"bb\":","    best_strategy = \"Bollinger Bands Strategy\"","else:","    pass","best_stock_number = stock_profits[best_stock_strategy]","print(\"\\nThe best stock is %s, using %s, with a total profit of %d.\" % (best_stock, best_strategy, best_stock_number))","saveResults(results)",""]}],[{"start":{"row":215,"column":20},"end":{"row":216,"column":0},"action":"remove","lines":["",""],"id":319}],[{"start":{"row":215,"column":20},"end":{"row":216,"column":0},"action":"insert","lines":["",""],"id":320},{"start":{"row":216,"column":0},"end":{"row":217,"column":0},"action":"insert","lines":["",""]},{"start":{"row":217,"column":0},"end":{"row":218,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":33,"column":45},"end":{"row":33,"column":64},"action":"remove","lines":["final_project/data/"],"id":322},{"start":{"row":33,"column":45},"end":{"row":33,"column":64},"action":"insert","lines":["/Final_Project/data"]}],[{"start":{"row":33,"column":64},"end":{"row":33,"column":65},"action":"insert","lines":["/"],"id":325}],[{"start":{"row":33,"column":45},"end":{"row":33,"column":46},"action":"remove","lines":["/"],"id":326}],[{"start":{"row":33,"column":20},"end":{"row":33,"column":21},"action":"insert","lines":["/"],"id":327}],[{"start":{"row":33,"column":20},"end":{"row":33,"column":21},"action":"remove","lines":["/"],"id":328}],[{"start":{"row":33,"column":21},"end":{"row":33,"column":64},"action":"remove","lines":["home/ubuntu/environment/Final_Project/data/"],"id":330},{"start":{"row":33,"column":21},"end":{"row":33,"column":40},"action":"insert","lines":["/Final_Project/data"]}],[{"start":{"row":33,"column":21},"end":{"row":33,"column":22},"action":"remove","lines":["/"],"id":331}],[{"start":{"row":33,"column":39},"end":{"row":33,"column":40},"action":"insert","lines":["/"],"id":332}],[{"start":{"row":181,"column":17},"end":{"row":181,"column":60},"action":"remove","lines":["/home/ubuntu/environment/final_project/data"],"id":333},{"start":{"row":181,"column":17},"end":{"row":181,"column":36},"action":"insert","lines":["/Final_Project/data"]}],[{"start":{"row":48,"column":17},"end":{"row":48,"column":60},"action":"remove","lines":["/home/ubuntu/environment/final_project/data"],"id":334},{"start":{"row":48,"column":17},"end":{"row":48,"column":36},"action":"insert","lines":["/Final_Project/data"]}],[{"start":{"row":14,"column":17},"end":{"row":14,"column":60},"action":"remove","lines":["/home/ubuntu/environment/final_project/data"],"id":335},{"start":{"row":14,"column":17},"end":{"row":14,"column":36},"action":"insert","lines":["/Final_Project/data"]}],[{"start":{"row":179,"column":4},"end":{"row":179,"column":5},"action":"remove","lines":["#"],"id":336}],[{"start":{"row":33,"column":20},"end":{"row":33,"column":35},"action":"remove","lines":["/Final_Project/"],"id":337},{"start":{"row":33,"column":20},"end":{"row":33,"column":59},"action":"insert","lines":["/home/ubuntu/environment/Final_Project/"]}],[{"start":{"row":48,"column":17},"end":{"row":48,"column":32},"action":"remove","lines":["/Final_Project/"],"id":338},{"start":{"row":48,"column":17},"end":{"row":48,"column":56},"action":"insert","lines":["/home/ubuntu/environment/Final_Project/"]}],[{"start":{"row":171,"column":29},"end":{"row":171,"column":68},"action":"remove","lines":["/home/ubuntu/environment/final_project/"],"id":339},{"start":{"row":171,"column":29},"end":{"row":171,"column":68},"action":"insert","lines":["/home/ubuntu/environment/Final_Project/"]}],[{"start":{"row":181,"column":17},"end":{"row":181,"column":32},"action":"remove","lines":["/Final_Project/"],"id":340},{"start":{"row":181,"column":17},"end":{"row":181,"column":56},"action":"insert","lines":["/home/ubuntu/environment/Final_Project/"]}],[{"start":{"row":14,"column":17},"end":{"row":14,"column":32},"action":"remove","lines":["/Final_Project/"],"id":342},{"start":{"row":14,"column":17},"end":{"row":14,"column":56},"action":"insert","lines":["/home/ubuntu/environment/Final_Project/"]}],[{"start":{"row":6,"column":11},"end":{"row":6,"column":141},"action":"remove","lines":["http://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=' + ticker + '&outputsize=full&apikey=6K822N6TX3TU6KBP"],"id":344},{"start":{"row":6,"column":11},"end":{"row":6,"column":129},"action":"insert","lines":["https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\"+ticker+\"&outputsize=full&apikey=6K822N6TX3TU6KBP"]}],[{"start":{"row":6,"column":88},"end":{"row":6,"column":89},"action":"remove","lines":["\""],"id":345}],[{"start":{"row":6,"column":88},"end":{"row":6,"column":89},"action":"insert","lines":["'"],"id":346}],[{"start":{"row":6,"column":79},"end":{"row":6,"column":80},"action":"remove","lines":["\""],"id":347}],[{"start":{"row":6,"column":79},"end":{"row":6,"column":80},"action":"insert","lines":["'"],"id":348}],[{"start":{"row":6,"column":80},"end":{"row":6,"column":81},"action":"insert","lines":[" "],"id":349}],[{"start":{"row":6,"column":82},"end":{"row":6,"column":83},"action":"insert","lines":[" "],"id":350}],[{"start":{"row":6,"column":89},"end":{"row":6,"column":90},"action":"insert","lines":[" "],"id":351}],[{"start":{"row":6,"column":91},"end":{"row":6,"column":92},"action":"insert","lines":[" "],"id":352}],[{"start":{"row":26,"column":11},"end":{"row":26,"column":141},"action":"remove","lines":["http://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=' + ticker + '&outputsize=full&apikey=6K822N6TX3TU6KBP"],"id":353},{"start":{"row":26,"column":11},"end":{"row":26,"column":133},"action":"insert","lines":["https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=' + ticker + '&outputsize=full&apikey=6K822N6TX3TU6KBP"]}],[{"start":{"row":170,"column":4},"end":{"row":170,"column":15},"action":"remove","lines":["saveResults"],"id":354},{"start":{"row":170,"column":4},"end":{"row":170,"column":15},"action":"insert","lines":["SaveResults"]},{"start":{"row":215,"column":0},"end":{"row":215,"column":11},"action":"remove","lines":["saveResults"]},{"start":{"row":215,"column":0},"end":{"row":215,"column":11},"action":"insert","lines":["SaveResults"]}],[{"start":{"row":14,"column":42},"end":{"row":14,"column":55},"action":"remove","lines":["Final_Project"]},{"start":{"row":14,"column":42},"end":{"row":14,"column":55},"action":"insert","lines":["pinal_project"]},{"start":{"row":33,"column":45},"end":{"row":33,"column":58},"action":"remove","lines":["Final_Project"]},{"start":{"row":33,"column":45},"end":{"row":33,"column":58},"action":"insert","lines":["pinal_project"]},{"start":{"row":48,"column":42},"end":{"row":48,"column":55},"action":"remove","lines":["Final_Project"]},{"start":{"row":48,"column":42},"end":{"row":48,"column":55},"action":"insert","lines":["pinal_project"]},{"start":{"row":171,"column":54},"end":{"row":171,"column":67},"action":"remove","lines":["Final_Project"]},{"start":{"row":171,"column":54},"end":{"row":171,"column":67},"action":"insert","lines":["pinal_project"]},{"start":{"row":181,"column":42},"end":{"row":181,"column":55},"action":"remove","lines":["Final_Project"]},{"start":{"row":181,"column":42},"end":{"row":181,"column":55},"action":"insert","lines":["pinal_project"]}]]},"ace":{"folds":[{"start":{"row":52,"column":34},"end":{"row":90,"column":32},"placeholder":"..."},{"start":{"row":92,"column":40},"end":{"row":129,"column":32},"placeholder":"..."},{"start":{"row":131,"column":27},"end":{"row":168,"column":32},"placeholder":"..."}],"scrolltop":94.19999999999997,"scrollleft":0,"selection":{"start":{"row":181,"column":55},"end":{"row":181,"column":55},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":4,"state":"start","mode":"ace/mode/python"}},"timestamp":1713388744901}